# Generated by Django 4.2 on 2023-12-15 07:47

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Bucket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=30, null=True)),
                ("firstname", models.CharField(blank=True, max_length=30, null=True)),
                ("surname", models.CharField(blank=True, max_length=30, null=True)),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("user_creation_date", models.DateField(blank=True, null=True)),
                ("user_update_date", models.DateField(blank=True, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("email", models.EmailField(max_length=90, unique=True)),
                ("credit_card", models.CharField(blank=True, max_length=16, null=True)),
                ("role", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "photo",
                    models.ImageField(blank=True, null=True, upload_to="user_photos/"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="custom_users", to="auth.group"
                    ),
                ),
                (
                    "user_bucket",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="myapp.bucket",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True, related_name="custom_users", to="auth.permission"
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "users",
                    models.ManyToManyField(related_name="roles", to="myapp.customuser"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "product_categories",
                    models.ManyToManyField(
                        related_name="products", to="myapp.category"
                    ),
                ),
                (
                    "roles",
                    models.ManyToManyField(related_name="products", to="myapp.role"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Photo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("link", models.CharField(max_length=255)),
                (
                    "bucket",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photo",
                        to="myapp.bucket",
                    ),
                ),
                (
                    "employee",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photo",
                        to="myapp.employee",
                    ),
                ),
                (
                    "photo_categories",
                    models.ManyToManyField(related_name="photos", to="myapp.category"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="employee",
            name="employee_photo",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="employee_profile",
                to="myapp.photo",
            ),
        ),
        migrations.AddField(
            model_name="employee",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="employee_profile",
                to="myapp.customuser",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="category_photos",
            field=models.ManyToManyField(related_name="categories", to="myapp.photo"),
        ),
        migrations.AddField(
            model_name="category",
            name="category_products",
            field=models.ManyToManyField(related_name="categories", to="myapp.product"),
        ),
        migrations.AddField(
            model_name="bucket",
            name="categories",
            field=models.ManyToManyField(related_name="buckets", to="myapp.category"),
        ),
        migrations.AddField(
            model_name="bucket",
            name="products",
            field=models.ManyToManyField(related_name="baskets", to="myapp.product"),
        ),
        migrations.AddField(
            model_name="bucket",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="buckets",
                to="myapp.customuser",
            ),
        ),
    ]
